	
	Пространства имен (пакеты, модули) С версии РНР >= 5.3
	
	Проблематика:
		Отсутствие пространства имен подобно отсутствию директорий в файлов системе.
		Все глобальные идентификаторы должны быть уникальны: константы, функции, классы...
		В свою очередь это ведет к подобным именам: PHPUnit_Frameworl_TestCase. 
	
	Решение:
		Простарнства имен предоставляют возможность группировать определения php.
				namespace App\Template;
				
	Особенности namespace:
		Могут быть воженными (один namespace может быть вложен в другой namespace).
		Не связаны с файловой структурой (обычно их связывают, но это такое логическое соединение,
		 жесткой привязки все-таки нет. Включение файлов и именование namespace это 2 разные вези в 
		 в рамках PHP).
		В одном файле может быть несколько определений пространств (так делать не стоит, но 
		 технически это возможно).
		Определения находящиеся в одном и том же пространстве имен имеют прямой доступ друг к другу.
		
	Для чего нужны пространства имен? 
		Для возможности создавать функции с любыми именами без страха, что кто-то уже занял это имя.
		Для изоляции сущностей (например функций) друг от друга.
		
	
ССЫЛКИ
	http://php.net/manual/ru/language.namespaces.php
	http://php.net/manual/ru/language.namespaces.faq.php
	
	
	
ОТВЕТЫ 
	Кирилл Мокевнин
		Вам и не нужно пытаться ухватить все сразу, вы же поняли что такое изоляция имен, вы поняли 
		 как создать такую изоляцию (файл с указанием namespace) и как ее использовать, на уровне 
		 "подключил файл, обратился к функции из неймспейса", вот собственно и все, остальное это уже 
		 незначительные рюшечки, которые вы постигните в процессе практики.
		 
		Так вы же написали что "про папки я все понял". Это ведь тоже самое. Если бы у вас не было 
		 неймспейсов (папок в файловой системе), вы бы не смогли создать два файла с одинаковым 
		 названием (две функции с одинаковым названием).
		 То есть абсолютно всем всегда пришлось бы придумывать уникальные имена функций, иначе 
		 подключение чужого кода приводило бы всегда к ошибке "не могу определить функцию, такая 
		 функция уже существует"
		
		Хотя в правильной системе не должно существовать функций определенных вне неймспейсов. 
		 В многих языках это даже невозможно, но в php, к сожалению, они появились не сразу, поэтому 
		 для сохранения обратной совместимости есть возможность создавать функции вне namespace.
		 
		То как они реализованы, зависит от того что придумают создатели языков. Важно понимать что 
		 понятие "пространство имен" это общий принцип разделения. В каждом языке свои слова для 
		 конкретной реализации: "модуль", "пакет", "неймспейс" и другие. Где-то надо описывать, где-то 
		 не надо, все индивидуально. В js это модули и о них я говорю практически в самом начале курса.
		
		В js, кстати, нет понятия "вложенный модуль", в отличие от php, у вас просто есть модуль который 
		 можно импортировать. При этом в js так же нет понятия "включить файл", вы всегда импортируете 
		 модуль. Такая модель проще в использовании, в том смысле что у вас нет как в php отдельно 
		 файловой структуры и включения файлов и отдельно системы неймспейсов и импорта неймспейсов.
		 
		There MUST be one blank line after the namespace declaration, and there MUST be one blank line 
		 after the block of use declarations.
		 
		Вы себе как-то не так представляете работу языка. Не происходит никакой вставки кода одного файла 
		 в другой на физическом уровне. Инструкции написанные в одном файле, выполняются для этого 
		 файла/неймспейса, а при включении в другой файл становятся доступны там по определенным правилам.
		 
		Папка у вас на диске это пространство имен. Нечто что позволяет создавать имена в изоляции, 
		 без боязни что вы пересечетесь с чем-то еще. Представьте себе что у вас на диске не существовало 
		 бы папок и их нельзя было бы делать. Вот примерно тоже самое было бы в языках программирования 
		 без пространств имен.
		На самом деле это одно и тоже, в данном случае я говорю про сам термин "пространство имен". Это 
		 некий способ организовать изоляцию имен. Если говорить про конструкцию namespace в php, то 
		 источником того "как правильно" служит официальный style guide http://www.php-fig.org/psr/psr-1/. 
		 В этом документе кроме описания того как нужно правильно создавать неймспейсы, есть так же отсылка 
		 к autoload. 
		 
		 
		 
		 
		 