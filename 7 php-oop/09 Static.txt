
	Статические свойства и методы это объявленные внутри класса со спец словом  static.
	Это означает,что эти свойства и методы не имеют отношения к объектам этого класса.
	
	когда не было пространства имен в РНР, то отделить функции можно было используя статик.
	Они получались глобальными, но при этом у нее был уникальный вызов через класс.
	
	Статические свойства и методы полезно использовать, когда класс владеет какой-то МЕТАинформации.
	Мы используем статические свойства, как метаинформацию, которую использует сам объект.
	
	Делать класс ради статики это по сути просто неймспейс.
	
ТЕСТЫ
	Статический метод может использовать статические свойства
	
	Статическое свойство принадлежит классу
	
	В каких случаях полезно использовать статические свойства и методы?
		Когда у класса есть метаинформация используемая его объектами
		Если создание объектов комплексная операция (нужно произвести какие-то вычисления)
		
		
		
ЗАДАНИЕ
	Один из способов работы с конфигурационными файлами - это динамическое определение типа 
	 файла на основе расширения и выбор соответствующего парсера. После парсинга данные 
	 преобразуются в единый вид, и из приложения работа с ними идет независимо от источника. 
	 Пример реализации:

	$config = Config::factory("path/to/ini");
	$config->getValue('host');

	$config = Config::factory("path/to/xml");
	$config->getValue('host');
	
	Для простоты наша реализация работает только с плоскими конфигурационными файлами, то 
	есть с key и value.

	Config.php
	Реализуйте статическую функцию factory у класса Config, которая на основе расширения 
	 файла выбирает правильный парсер, производит парсинг данных (см. интерфейсы) и возвращает инстанс класса Config.
	
	Подсказки:
	Для получения расширения файла есть функция pathinfo;
	Чтобы создать свой собственный инстанс, можно писать new self()