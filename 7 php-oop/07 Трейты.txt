	
	Трейт (англ. trait) - это механизм обеспечения повторного использования кода в языках 
	 с поддержкой единого наследования, таких как PHP. Трейт предназначен для уменьшения 
	 некоторых ограничений единого наследования, позволяя разработчику повторно использовать 
	 наборы методов свободно, в нескольких независимых классах и реализованных с использованием 
	 разных архитектур построения классов. Семантика комбинации трейтов и классов определена 
	 таким образом, чтобы снизить уровень сложности, а также избежать типичных проблем, 
	 связанных с множественным наследованием и смешиванием (mixins).

	Трейт очень похож на класс, но предназначен для групирования функционала хорошо 
	 структурированым и последовательным образом. Невозможно создать самостоятельный 
	 экземпляр трейта. Это дополнение к обычному наследованию и позволяет сделать 
	 горизонтальную композицию поведения, то есть применение членов класса без 
	 необходимости наследования.
	 
	Трейты полезны когда они могут написать обобщеные алгоритмы, а от вашего объекта 
	 требуется реализация одного - двух методов.
	

	 
	 
ТЕСТЫ
	Трейтами можно полностью заменить использование абстрактных классов
	Трейты полезны когда есть общая реализация для разных классов
	 
	Можно ли создать инстанс трейта?
		Нет
	 
ССЫЛКИ 
	http://php.net/manual/ru/language.oop5.traits.php
	
	
ЗАДАНИЕ
	В этом упражнении нужно реализовать трейт ComparableByAge. Он полезен в случае, когда у 
	 нас есть класс сущностей, имеющих возраст, и нам нужно производить сравнения по возрасту.

	Трейт требует реализовать функцию compare в классе, куда его подмешивают. Эта функция 
	 сравнивает переданный аргумент (того же типа) с текущим объектом. И работает так:

	Если текущий объект старше переданного, то функция возвращает 1.
	Если текущий объект младше переданного, то функция возвращает -1.
	Функция возвращает 0 в случае, если объекты одного возраста.
	Функция compare - это все, что требует ComparableByAge от классов. На основе 
	 этой функции можно реализовать множество полезных методов.

	Пример использования:

	$user1 = new User(20);
	$user2 = new User(30);

	$user2->isOlderThan($user1); // true
	$user1->isYoungerThan($user2); // true
	$user1->isAgeTheSame($user2); // false

	$car1 = new Car('bmw', 1985);
	$car2 = new Car('lexus', 2000);

	$car2->isOlderThan($car1); // false
	$car1->isYoungerThan($car2); // false
	$car1->isAgeTheSame($car2); // false
		
		ComparableByAge.php
		Реализуйте трейт ComparableByAge.

		User.php
		Реализуйте функцию compare.

		Car.php
		Реализуйте функцию compare.
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	