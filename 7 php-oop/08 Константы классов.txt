
	Антипаттерн магические числа, когда некоторые цифры раскиданы по всему коду, 
	 и сразу непонятно насколько они нужны.
	Логичнее часто бывает цифры разместить в константы.
	

				class MarkdownParser
				{
					const VERSION = '0.9.1';
					
					public function getVersion()
					{
						return self::VERSION;		// Доступ к констакте внутри класса
					}
				}
	
				
				/* echo Application::VERSION; */ 	// получаем константу, используя имя класса (обычно снаружи)
	
	Константы также могут быть объявлены и в пределах одного класса. 
	 Отличие переменных и констант состоит в том, что при объявлении последних 
	 или при обращении к ним не используется символ $. Область видимости констант, 
	 по умолчанию, public.
	
	Значение должно быть неизменяемым выражением, не (к примеру) переменной, 
	 свойством или вызовом функции.
	 
	Обратите внимание, что константы класса задаются один раз для всего класса, а не 
	 отдельно для каждого созданного объекта этого класса.
	
	
ТЕСТЫ
	Для чего можно использовать константы?
		Для именования «магических чисел»
		Для задания говорящих имен строкам	
		

ССЫЛКИ 
	http://php.net/manual/ru/language.oop5.constants.php
	
	
ЗАДАНИЕ
	Создайте класс Markdown.
	Создайте у класса константу OUTPUT_FORMAT со значением html.
	Создайте метод getOutputFormat, который возвращает значение константы.
						// мое решение (совпадает с контрольным)	
							<?php

							namespace App;

							class Markdown
							{
								// BEGIN (write your solution here)
								const OUTPUT_FORMAT = 'html';
								
								public function getOutputFormat()
								{
									return self::OUTPUT_FORMAT;
								}
								// END
							}

	
	
	
	
	