	
	В PDO нет функциональности по работе с оператором  in , поэтому обрабатывать массивы значений, 
	 которые мы хотим подставлять в запросы, приходится самостоятельно.
						<?php
						
						namespace Theory;
						
						$opt = [ 
							\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION,
							\PDO::ATTRDEFAULT_FETCH_MODE => \PDO::FETCH_ASSOC
						];
						
						$pdo = new \PDO('sqlite::memory:', null, null, $opt);
						$pdo->exec("create table users (id integer, name string)");
						
						$data = [
							[1, 'john'],
							[3, 'adel'],
							[8, ada]
						];
						$stmt = $pdo->prepare("insert into users values (?, ?)");
						foreach ($data as $value) {
							$stmt->execute($value);
						}
						
						$idx = [1, 2, 3];
						$in = implode(', ', array_fill(0, sizeof($idx), '?'));
						$sql = "SELECT * FROM users WHERE id IN (?)";
						$stm = pdo->prepare($sql);
						$stm->execute($idx);
						
						print_r($stm->fetchAll());
						
		Используем функцию array_fill для создания массива вида ?, ?, ? 
		
		
		
		
ЗАДАНИЕ
	Реализуйте функцию where, которая принимает на вход соединение с базой данных и массив описывающий 
	 условия выборки. Функция должна вернуть список идентификаторов пользователей отсортированных по возрастанию.

	Пример:

	where($pdo, []); // select id from users order by id
	where($pdo, ['id' => []]); // select id from users order by id

	// select id from users where first_name in ('john', 'adel')
	where($pdo, ['first_name' => ['john', 'adel']])

	// select id from users where first_name = 'ada' or source in ('bing', 'gmail')
	where($pdo, ['first_name' => 'ada', 'source' => ['bing', 'gmail']])
	
	
	
							// Контрольное решение
								<?php

								namespace App\Solution;

								function where($pdo, array $params)
								{
									// BEGIN (write your solution here)
									$whereParts = array_reduce(
										array_keys($params),
										function ($acc, $key) use ($pdo, $params) {
											$values = (array) $params[$key];
											if ($values) {
												$in = array_map(function ($item) use ($pdo) {
													return $pdo->quote($item);
												}, $values);
												$joinedIn = implode(", ", $in);
												$acc[] = "$key IN ($joinedIn)";
											}
											return $acc;
										},
										[]
									);

									$where = $whereParts ? 'WHERE ' . implode(' OR ', $whereParts) : '';
									$query = sprintf("SELECT id FROM users %s ORDER BY id", $where);
									$stmt = $pdo->prepare($query);
									$stmt->execute();

									return $stmt->fetchAll(\PDO::FETCH_COLUMN);

									// END
								}
	
	
	
	
	
							// Другие решения 
								https://ru.hexlet.io/code_reviews?q%5Bexercise_id_eq%5D=334
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	