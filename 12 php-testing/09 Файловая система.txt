
	Тестирование систем с побочными эффектами сложнее, тестирования читсых функций.
	НА примере файловой системы, но вцелом касается всех библиотек, всего кода, который взаимодействует с внешней средой.
	
		Есть функция 
						<?php 
						
						namespace Theory\Solution;
						
						function makeFolderForUser($userId, $rootDir = null)
						{
							$directory = ($rootDir ? $rootDir : sys_get_temp_dir()) .DIRECTORY_SEPARATOR . $userID;			// В итоге получится что-то вроде "/tmp/1234"
							
							if (!file_exists($directory)) {
								mkdir($directory, 0700, true);			
							}
						}
						
						
		Как протестировать эту функцию 
		
		
		
		
		
		
		
		
		
		
ТЕСТЫ
	Почему недостаточно определить tearDown для чистки при тестировании фс?
		Процесс выполняющий тесты может быть прерван до выполнения tearDown
		
	Почему тестировать файловую систему сложнее, чем функции?
		Побочные эффекты
		
		
		
ЗАДАНИЕ
	Напишите тесты на функцию mkdirs, которая рекурсивно создает директории для переданного пути.
	
									// Мое решение
																		
										
											<?php

											namespace App;

											require getenv('COMPOSER_HOME') . '/vendor/autoload.php';

											// BEGIN (write your solution here)
											use org\bovigo\vfs\vfsStream;
											// END

											class TestSolution extends \PHPUnit_Framework_TestCase
											{
												// BEGIN (write your solution here)
												public function testMkdirs()
												{
													$root = vfsStream::setup('root');

													mkdirs(vfsStream::url('root') . '/test');
													$this->assertTrue($root->hasChild('test'));

													mkdirs(vfsStream::url('root') . '/test/inner');
													$this->assertTrue($root->hasChild('test/inner'));
												}
												// END
											}

	
	
	
	
	