
	Иногда, особенно при проектировании библиотек, нужно посмотреть как один объект ведет себя внутри другого
					
					/*
						$http = new Http();				// есть объект класса Http
						$sender = new Sender($http);	// есть объект Sender, который на вход принимает объект класса  Http
						$sender->send($msg)				// У сендера есть метод send(), который на вход принимает текстовое сообщение и пользуяс http делает отправку от http
					*/

	C Mock идет ориентация на то как используется Http  внутри. 
	 Поняие блек бокс меняет на транспорет бокс. При Mock завязка идет на реализацию, кода, что плохо.
	
	
	
	Моск используется при тестированнии библиотек. 
	
	
	
ССЫЛКИ
	https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects.tables.matchers
	
	
	
ВОПРОСЫ
	Выберите верные утверждения:
		Мок превращает "black box" тестирование в "white box"
		Стаб используется для подмены компонентов, мешающих тестировать основной код
		Мок используется при необходимости проверить использование компонента, который "мокается"
	Почему интерфейс создания моков и стабов одинаковый?
		Технически моки получаются из стабов путем добавления ожиданий
		
		
		
ЗАДАНИЕ
	Существует подход для работы с базой данных, в котором сама сущность отвечает за свое сохранение в базу. 
	 Этот подход называется ActiveRecord. С точки зрения грамотной архитектуры это решение не очень хорошее, 
	 но благодаря простой реализации является весьма популярным среди программистов. Да и большинство 
	 фреймворков внутри себя содержат orm, реализованную именно как ActiveRecord.

	SolutionTest.php
	Напишите тесты на то, что внутри класса User правильно вызывается метод query объекта, 
	 отвечающего за соединение с базой данных. 
	 
	 Правила работы метода query такие:
		Вызов save на свежесозданном объекте приводит к однократному вызову query.
		Повторный вызов (без изменения объекта) не выполняет запроса к базе.
		Вызов методов setFirstName или setLastName приводит к тому что сохранение снова выполнит запрос.
	Пример:

	$connection = new Db();
	$user = new User($connection);

	$user->save(); // true
	$user->setFirstName("John");
	$user->save(); // true
	$user->save(); // false
	
	
	