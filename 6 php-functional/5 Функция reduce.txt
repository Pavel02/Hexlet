	
	array_reduce позволяет делать практически все, что программисты делают с помощью циклов,
	 при этом она меньше подвержена ошибкам.
	
	
	// as array
					$array = [1, 3, 2, 9, 8, 4];
					
					// нахождение макс числа в коллекции
					$result = array_reduce($array, function ($acc, $item) {
						return $item > $acc ? $item : $acc;
					}, $array[0]);
					
					print_r($result);
	
	На вход приходит коллекция, далее функция arrya_reduce проходит по коллекции, 
	 а в момент первого прохода создается аккумулятор (значение которого потом будет возвращено).
	 Это значение может быть как простым (tru, или число) так и какая-либо сложная структура 
	 данных (объект).
		array_reduce принимает массив и лямбдафункцию ( эта функция принимает аккумулятор и 
		 значение коллекции для данного индекса, и лямбда функция должна будет вернуть новый аккумулятор
		 таким образом аккумулятор протаскивается через все проходы и в конечном итоге возвращается) 
		 Третий аргумент array_reduce  это начальное значение аккумулятора ($array[0]  или  просто [])
	
	// пример на количество слов в массиве
					$array = [1, 3, 2, 9, 1, 4, 3];

					$result = array_reduce($array, function ($acc, $item) {
						if (!array_key_exists($item, $acc)) {
							$acc[$item] = 1;
						} else {
							$acc[$item]++;
						}
						
						return $acc;
					}, []);
					
					print_r($result);
	
	Важный момент что присваивание и изменение значений это не функциональный подход, По сути
	 внутри лямбды мы используем императивный подход, но он здесь присутствует, так как РНР не пол-
	 ностью функциональный ЯП.
	 
	 
	Полезные функции из библиотеки  Functional	
		// Functional\reduce_left (обходит коллекцию слева)
					$result = reduce_left($array, function ($item, $index, $collection, $acc) {
						return $item > $acc ? $item : $acc;
					}, $array[0]);
	
	
	
	
	Можно ли с помощью reduce выполнить отображение списка? ДА
	Можно ли с помощью reduce выполнить фильтрацию? ДА
	
	
	
ЗАДАНИЕ
	Реализуйте функцию wordsCount, которая принимает на вход массив слов и 
	 возвращает массив, в котором ключ это слово, а значение это количество раз, 
	 которое это слово встречалось в исходном массиве.

	Пример:

	['cat' => 1, 'dog' => 1, 'fish' => 2] == wordsCount(['cat', 'dog', 'fish', 'fish'])
							// мое решение
							function wordsCount($array) 
							{
								$res = array_reduce($array, function ($acc, $item) {
									if (!array_key_exists($item, $acc)) {
										$acc[$item] = 1;
									} else {
										$acc[$item]++;
									}
									
									return $acc;
								}, []);
								
								return $res;
							}					
	
	
							
							// контрольное решение
							function wordsCount($array)
							{
								$result = reduce_left($array, function ($item, $index, $collection, $acc) {
									if (!array_key_exists($item, $acc)) {
										$acc[$item] = 0;
									}
									$acc[$item]++;
									return $acc;
								}, []);

								return $result;
							}							
							
							
	