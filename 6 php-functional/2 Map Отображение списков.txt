	
	Map наверное самая популярная функция в функциональном программировании.
	Map функция высшего порядка, задача которой отображать один список или колекцию 
	 в другой.
	 // as array 
	 // [1, 2, 3] => [2, 4, 9] 	
	 // для примера: на входе коллекция, потом преобразования, на выходе коллекция с таким же количеством, 
	  но другими значениями, так как они были преобразованы.
	 
	 // aray_map функция рнр, принимает на вход лямбда функцию (анонимная функция) и 
	 // вторым параметром массив. То есть на входе приним элемент массива преобразовывается и 
	 // отображается новая коллекция.
					$array = range(1, 10);
					
					$result = array_map(function ($item) {
						return $item ** 2;
					}, $array);
					
					print_r($result);
	
	
	// Нам может понадобиться не только сам массив, но и его  ключи,
	// тогда есть небольшой хак.
	// Также   array_map   на вход может принимать только ключи, если коллекция объект, то решени ениже с помощью библиотеки  Functional
					$map = ['key' => 'value', 'another-key' => 'another-value'];
					
					$result = array_map(function ($key, $value) {
						return $key . $value;						// конкатенация ключа и значения.
					}, array_keys($map), $map);
					
					print_r($result);
					
					
					
	Полезные функции из библиотеки  Functional
					// Functional\map
					$iterator = new \DirectoryIterator('..');
					$result = map($iterator, function ($info) {
						return $info->getFilename();
					});
					
					print_r($result);
					
					
					
					
					
					
					
	
	
	
	
	
	Может ли map (как операция отображения списков) вернуть список, размерность 
	 которого отличается от размерности исходного списка? НЕТ не может.
	
	array_map может работать не только с массивами, но и с объектами, 
	 которые реализуют интерфейс Traversable. Верно? НЕТ не верно.
	
ССЫЛКИ
	http://php.net/manual/en/language.oop5.iterations.php
	https://habrahabr.ru/post/145946/
	http://true-coder.ru/php/iterirovanie-obektov-v-php-vstroennye-klassy-iteratory-obekt-kak-massiv.html
	
	
	
ЗАДАНИЕ
	«Мощность строки» — выдуманное нами понятие, которое показывает ее силу ;-). Вычисляется 
	 оно как сумма ASCII кодов букв строки.

	Реализуйте функцию powerOfString, которая находит мощность строки.
	Подсказки:
	Сумма элементов массива — array_sum.
	Преобразование строки в массив — str_split.
	Получить ASCII код символа — ord.
	
	
						// мое решение 
						function powerOfString($str)
						{
							$arr = str_split($str);
							$result = array_sum(array_map(function ($value) {return ord($value); }, $arr));
							return $result;
						}



						
						
						// Контрольное решение
						namespace App\Solution;

						require getenv('COMPOSER_HOME') . '/vendor/autoload.php';

						use function Functional\map;
						function powerOfString($str)
						{
						$result = map(str_split($str), function ($item) {
							return ord($item);
						});

						return array_sum($result);
						}


	
	
	