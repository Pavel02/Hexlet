
	По мимо того что мы данные можем передавать через   боди  используя при пост запросах и 
	 отправки форм, мы также можем передавать Query String  в  строке   request line
	 
						POST /?key=value&key3=value3 HTTP/1.1
	
		Строка запроса не бесконечна, ограничение 255 символов.
		Эти параметры не имеют ничего общего к GET параметрам. Из можно посылать совместно с POST 
		
		Например в PHP  существует глобальный массив  $_REQUEST  В который попадают 
		 параметры и из POST  и  из  Query String  так что все будет работать.
		 
	
	глагол  HTTP   GET похож на чистую функцию. При повторном запросе мы должны получать те же данные.
	
	глагол  POST  предназначен для измененя данных. POST  никогда не кешируются.
	
	
		Зачем использовать Query_string ?
	Формы как правило 2-х типов. Первый это на изменение данных, создание/, регистрация
	 Второй это форма на выборку, какая то фильтрация 
	 
	В форме яндекса когда посылаете запрос, то данные отправятся  GET  и  query string.
		Это семантически верно, так как вы не производите никаких изменений 
		И вы можете дать ссылку на этот запрос что также важно.
	
	
ССЫЛКИ
	https://en.wikipedia.org/wiki/Query_string
	https://tools.ietf.org/html/rfc3986
	http://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string
	
	
ТЕСТЫ
	Какой из типов запросов должен использоваться только для получения данных, и не должен 
	 приводить к изменениям данных?
		GET
		
	Какой из типов запросов лучше всего поддается кэшированию (если запросы используются правильно)?
		GET
		
	Возможно ли в одном запросе передавать данные и в body, и в request line с помощью query string?
		да
		
	Запрос публикует новый комментарий в блоге. Является ли такой запрос идемпотентным?
		нет
		
		
		
ВОПРОСЫ
	Никита
		Вы имеете ввиду, что если в адресной строке прописаны GET параметры то это не значит, 
		 что запрос именно GET, он так же может быть и POST. И могут одновременно передаваться и GET 
		 и POST параметры в один запрос, просто GET идут в query string а POST параметры в тело запроса. 
		 Я правильно все понял?)
	Kirill MokevninPRO
		Такой штуки как "get параметры" нет в принципе. Вы можете добавлять параметры в query string 
		 при любом типе запроса.
	Никита ТС
		Не могу понять, зачем тогда в php существуют массивы _GET и _POST если это все одни параметры. 
		 Если я отправляю форму с методом GET то я увижу эти параметры в строке запроса, если с POST то 
		 не увижу. Все что отправлено постом идет в _POST все что гетом в _GET. от сюда и "get параметры".
	Никита ТС
		То есть POST и GET это просто метод передачи параметров, методом GET параметры передаются в query string 
		 а методом POST в body. Правильно?
	Kirill MokevninPRO
		post, get а так же head, path, put и многие другие http глаголы это не способы передачи параметров, 
		 это глаголы http у которых есть определенная семантика. Например семантика get в том что он 
		 извлекает информацию, поэтому может кешироваться и обладает еще некоторым набором свойств 
		 (должен обладать по стандарту, ответственность лежит на вас как на разработчике). Семантика post это 
		 создание/модификация. Параметры в query string это функциональность, которая с глаголами вообще никак 
		 не связана. Все что касается http и того как это работает "по настоящему", вы всегда можете узнать 
		 в стандарте (и должны там узнавать как разработчик) ссылки на соответствующие документы есть в 
		 этой статье https://www.mnot.net/blog/2014/06/07/rfc2616_is_dead. Просто открываете и 
		 читаете как оно должно работать.
		Путаница идет во многом из-за особенностей форм в html. По умолчанию формы отправляются с 
		 глаголом get и передают параметры через query string, если мы напишем method="post", 
		 то будет глагол post и параметры уйдут в body.
		
		
		
		
		
ЗАДАНИЕ
	Используя telnet выполните запрос к hexlet.local (расположен на localhost) на порт 8080. 
	 Передайте в строке запроса следующие параметры: key равный value и another_key равный another_value. 
	  Параметры запроса: глагол get, 
						страница /, 
						протокол http 1.1;
	Запишите ваш request в файл solution;

	
								// BEGIN
								GET /?key=value&another_key=another_value HTTP/1.1
								HOST: hexlet.local
								// END
		
		
		
		
		
		
		
		
		
		