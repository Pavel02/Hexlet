
	Структура данных ПАРА 
	
				$pair = cons(1, 2);
		
		для пары есть 2 метода селектора. Для доставания значений.
			
				echo car($pair);
				echo cdr($pair);
				
	Данные - это 3 функции 1 конструктор и 2 селектора.
	 Но чтобы быть данными должно выполняться   x, y, z cons(x, y) x == (car(z)) y == (cdr(z))
	
	Такой структуры как пара в РНР нет, но Кирилл ее реализовал.
			
						<?php
						
						function cons($x, $y) 					// здесь результат это возврат лямбды функции
						{
							return function ($method) use ($x, $y) {
								switch ($method) {
									case "car":
										return $x;
									case "cdr":
										return $y;
								}
							};
						}
						
						function car($pair) 
						{
							return $pair("car");
						}
						
						function cdr($pair)
						{
							return $pair("cdr");
						}
	
	
	
ССЫЛКИ
	https://en.wikipedia.org/wiki/CAR_and_CDR
	https://mitpress.mit.edu/sicp/
	
	
	
ТЕСТЫ
	В реализации пары из видео функция cons возвращает
		функцию
		
	Как можно описать данные в рамках языка программирования?
		функция для создания данных + функции для получения данных	
		
		
ВОПРОСЫ
	Дмитрий МакухPRO
		Добрый день после просмотра видео где вы с помощью функций сделали новый тип данных(pair) у 
		 меня возник вопрос какая тогда разница между классом и функцией как типами данных
	Дмитрий Макух ТСPRO
		и еще одно мне кажется или действительно так есть что инкапсуляция в типе данных(pair) 
		 созданного с помощью функций лучше и понятнее (имею в виду она практически не может быть 
		 нарушенной) чем в класе с гетерами и сетерами
	Александр О.PRO
		Добрый день! На самом деле с помощью демонстрируемого в уроках способа (посредством функций) 
		 можно создавать объекты, обладающие всеми основными свойствами, присущими объектам, так как 
		 это понимается по меркам ООП. При этом вы правильно подметили про инкапсуляцию - то, каким 
		 образом она организована в тех же парах, резко ограничивает в возможности каких-либо своевольных 
		 мутаций данных. Можно сказать, что сама структура "сопротивляется изменениям" и настраивает (
		 на интуитивном уровне) программиста на правильный порядок работы.
		Конечно, если смотреть на более низком, прикладном, уровне то различия между объектами, 
		 порождаемые разными способами, есть различия: например, классы при статической типизации 
		 не позволят использовать не существующие свойства, выдавая подробные и конкретные предупреждения, 
		 что не представляется возможной в данной реализации на функциях; так же в таких "функциональных" 
		 объектах невозможен автокомплит. Хотя это прикладные и частные особенности, всё же они довольно 
		 важны.
		
		
ЗАДАНИЕ
	Solution.php
	В текущем задании представлен другой способ реализации пар.

	Допишите функцию car основываясь на том как работает функция cons.
	Допишите функцию cdr основываясь на том как работает функция cons.
		

		
		
							// мое и контрольное решение 
							<?php

							namespace App\Solution;

							function cons($x, $y)
							{
								return function ($func) use ($x, $y) {
									return $func($x, $y);
								};
							}

							function car(callable $pair)
							{
								// BEGIN (write your solution here)
								return $pair(function ($first, $second) {
									return $first;
								});
								// END
							}

							function cdr(callable $pair)
							{
								// BEGIN (write your solution here)
								return $pair(function ($first, $second) {
									return $second;
								});
								// END
							}
									

		