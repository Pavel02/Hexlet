
	Цель: Рассмотреть концепцию разделения программы на функциональные блоки, работающие с общей структурой данных.
	
	Интерфейсом является - список .
	Выражая все через простую структуру данных, и большое количесво функций для работы с этой струкурой.
	
	понятие Ленивые коллекции. Для того чтобы вычисления накапливались и вычислялись только 1 раз.
	
	
ТЕСТЫ
	Для успешной реализации стандартных интерфейсов существует одно требование. Какое?
		Использование одной структуры данных
	Перед нами стоит задача: «Необходимо в тексте найти все слова, которые содержат 5 букв и 
	 заканчиваются на "о". Возможно ли написать программу с использованием подхода "стандартные 
	 интерфейсы" для решения такой задачи?»
		Да, конечно
		
	
ЗАДАНИЕ
	Solution.php
	Реализуйте функцию solution, которая принимает на вход список чисел и выполняет следующие действия:

	удаляет все числа, не кратные трем.
	возводит оставшиеся числа в квадрат.
	возвращает среднее арифметическое списка полученного после предыдущей операции.
	Пример:

	22.5 == solution(l(1, 3, 8, 6)) // (3 * 3 + 6 * 6) / 2
	Подсказки
	Для подсчета числа элементов в списке используйте функцию length
		
						// Файл Solution.php
						<?php

						namespace App\Solution;

						require_once 'Pair.php';

						use function App\Pair\filter;
						use function App\Pair\map;
						use function App\Pair\accumulate;
						use function App\Pair\length;
						use function App\Pair\listToString;

						// BEGIN (write your solution here)

						function solution($list)
						{
							
							$result = filter($list, function ($item) {
								return $item % 3 === 0;
							});

							$result2 = map($result, function ($item) {
								return $item ** 2;
							});

							$result3 = accumulate($result2, function ($item, $acc) {
								return $acc + $item;
							}, 0);

							return $result3 / length($result2);
						}
						// END