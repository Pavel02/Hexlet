

	Реку́рсия — определение, описание, изображение какого-либо объекта или процесса внутри 
	 самого этого объекта или процесса, то есть ситуация, когда объект является частью самого себя. 
	 Термин «рекурсия» используется в различных специальных областях знаний — от лингвистики 
	 до логики, но наиболее широкое применение находит в математике и информатике.

	Функция pow($base, $exp);  Возводит в степень.
			pow(2, 4);
	
	
	Рекурсивное определение это определение функции через саму себя
		3 ** 5 = 3 * 3 ** 4
		x ** n = x * x ** (n-1)
		x ** 1 = x

		
	Рекурсия функция вызывает саму себя
			function myPow($base, $exp)
			{
				if ($exp == 1) { return $base;}				// точка выхода, чтобы не было бесконечной рекурсии
				return $base * myPow($base, $exp -1);
			}		
			
			
			echo myPow(4, 3);
			
			4 * (pow)
			4 * (4 * pow)
			4 * (4 * (4))
		
	Рекурсивный процесс при своей записи почти всегда один в один соответсвует математическому определению
	
	Визуализация рекурсии
	Пусть функция fun вычисляет факториал переданного числа используя рекурсию, тогда ее вызов 
	 будет работать так:
	fun(4)
	4 * func(3)
	4 * 3 * func(2)
	4 * 3 * 2 * func(1)
	4 * 3 * 2 * 1
	4 * 3 * 2
	4 * 6
	24
	Там где * 1 рекурсия прерывается, потому что стоит условие в начале функции. 
	 И после этого начинается сворачивание.
	 
	 
	 
	 
ССЫЛКИ
	http://php.net/manual/en/function.pow.php
	https://ru.wikipedia.org/wiki/Рекурсия
	
	
	
Kirill MokevninPRO
	Спасибо за комментарий. Не очень понятно каким образом вы определяете нужность 
	 или не нужность того что вам дают, но могу сказать наверняка, что курсы мы делаем 
	 для людей которые хотят стать настоящими программистами-инженерами, и понимают что 
	 это не просто и придется учиться многим, в том числе, сложным вещам. Этим мы сильно 
	 отличаемся от большинства проектов, которые ориентированы немного на другие вещи и там 
	 не будет терминов и вообще ничего такого что заставит лишний раз напряч мозг. А насчет 
	 улучшений, как вы понимаете этим мы и занимаемся, но процесс это не быстрый, чем больше от 
	 вас конструктивного фидбека тем лучше.
	Что касается макконнелла, грубо говря вы передргиваете. Макконнел говорил о том как в 
	 целом объясняется рекурсия и на чем она заканчивается в учебниках. А вы сейчас проходите 
	 курс, который посвящен лямбда-исчислению. И здесь будет рекурсии, во всех ее проявлениях, 
	 просто безумное количество. Более того, в функциональных языках (на которых мы пишем) у вас 
	 нет циклов, а есть только рекурсия.	
	 
	 
ЗАДАНИЕ
	Реализуйте рекурсивную функцию factorial, используя линейно-рекурсивный процесс.
	Факториал числа можно выразить следующим образом:
	factorial(0) -> 1
	factorial(1) -> 1
	factorial(n) -> n * factorial(n - 1)
	Пример:
	<?php
		6 === factorial(3); // true
		120 === factorial(5); // true
		3628800 === factorial(10); // true
	>
					// мое решение
					function factorial($num)
					{
						if ($num == 0) {return 1;}
						return $num * factorial($num - 1);
					}					
	 
					
					//контрольное решение
					    if ($num < 2) {
							return 1;
						}
						return $num * factorial($num - 1);
	 
	 
	 
	
	
	Реализуйте рекурсивную функцию fib, находящую числа Фибоначчи, 
	 используя древовидно-рекурсивный процесс.
	Формула:
	f(0) = 0
	f(1) = 1
	f(n) = f(n-1) + f(n-2)
	Пример:
	<?php
		2 === fib(3); // true
		5 === fib(5); // true
		55 === fib(10); // true
	>
					// мое решение	 
					function fib($num)
					{
						if ($num == 0) {
							return 0;
						} elseif ($num <= 2 ) {
							return 1;
						} else {
							return fib($num - 1) + fib($num - 2);
						}
					}	 
	 
	 
					// контрольное решение
					if ($num < 2) {
						return $num;
					}
					return fib($num - 1) + fib($num - 2);					
	 
	 
	 
	 
	 
	 
	 
	